<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[JSP EL 简介]]></title>
      <url>/2018/03/10/java/jsp/jsp-el/</url>
      <content type="html"><![CDATA[<p><strong>EL（Expression Language）</strong> 是为了使JSP写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。<br><a id="more"></a><br>The Java Unified Expression Language is a special purpose programming language mostly used in Java web applications for embedding expressions into web pages. The Java specification writers and expert groups of the Java web-tier technologies have worked on a unified expression language which was first included in the JSP 2.1 specification (JSR-245), and later specified by itself in JSR-341, part of Java EE 7.<br>                    ——<a href="https://en.wikipedia.org/wiki/Unified_Expression_Language" target="_blank" rel="noopener">Wikipedia</a></p>
<h1 id="EL基本用法"><a href="#EL基本用法" class="headerlink" title="EL基本用法"></a>EL基本用法</h1><h2 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h2><p>${expression}</p>
<h2 id="与-运算符"><a href="#与-运算符" class="headerlink" title="[ ]与.运算符"></a>[ ]与.运算符</h2><p>EL 提供“.“和“[ ]“两种运算符来存取数据。</p>
<p>当要存取的属性名称中包含一些特殊字符，如 . 或 - 等并非字母或数字的符号，就一定要使用“[ ]“。<br>例如：${ user. My-Name}应当改为${user[“My-Name”]}</p>
<p>如果要动态取值时，就可以用“[ ]“来做，例如：<br>${sessionScope.user[data]}中data 是一个变量</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>EL存取变量数据的方法很简单，例如：${username}。它的意思是取出某一范围中名称为username的变量。</p>
<p>因为我们并没有指定哪一个范围的username，所以它会依序从Page、Request、Session、Application范围查找。</p>
<p>假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传””。</p>
<h1 id="EL的特点"><a href="#EL的特点" class="headerlink" title="EL的特点"></a>EL的特点</h1><p>EL除了具有语法简单、使用方便的特点，还有以下特点：</p>
<h2 id="EL可以与JSTL结合使用，也可以也JavaScript语句结合使用"><a href="#EL可以与JSTL结合使用，也可以也JavaScript语句结合使用" class="headerlink" title="EL可以与JSTL结合使用，也可以也JavaScript语句结合使用"></a>EL可以与JSTL结合使用，也可以也JavaScript语句结合使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- EL与JSTL结合使用:遍历集合 --%&gt;</span><br><span class="line">&lt;c:forEach var=&quot;productFor&quot; items=&quot;$&#123;productList&#125;&quot;&gt;</span><br><span class="line">	$&#123;productFor.name&#125; : $&#123;productFor.price&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	//EL与JavaScript语句结合使用：注意，只有在JSP页面的EL表达式才能生效，js文件中的EL表达式会原样输出，并不会解析</span><br><span class="line">	var productName =&apos;$&#123;productList[0].name&#125;&apos;;</span><br><span class="line">	console.log(productName);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>EL中会自动进行类型转换，如果想通过EL输入两个字符串数值（如n1和n2）的和，可以直接通过“+”进行连接（如${n1+n2}）</p>
</li>
<li><p>EL不仅可以访问一般变量，还可以访问JavaBean中的属性及嵌套属性和集合对象</p>
</li>
<li><p>EL中可以执行算术运算、逻辑运算、关系运算和条件运算等操作</p>
</li>
<li><p>EL中可以获取命名空间（PageContext对象，他是页面中所有其他内置对象的最大范围的继承对象，通过他可以访问其他内置对象）</p>
</li>
<li><p>在EL中可以访问JSP的作用域（request、session、application、page）</p>
</li>
</ul>
<p>-在使用EL进行除法运算的时候，如果0作为除数，则返回无穷大Infinity，而不是返回错误</p>
<ul>
<li>扩展函数可以与Java类的静态方法进行映射</li>
</ul>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p> <a href="https://github.com/ijiangtao/tao-jsp/blob/master/src/main/webapp/pages/product/product.jsp" target="_blank" rel="noopener">实例源码</a></p>
<p> ：<a href="https://github.com/ijiangtao/tao-jsp/blob/master/src/main/webapp/pages/product/product.jsp" target="_blank" rel="noopener">https://github.com/ijiangtao/tao-jsp/blob/master/src/main/webapp/pages/product/product.jsp</a></p>
<p> <a href="https://my.oschina.net/u/3457980/blog/1579483" target="_blank" rel="noopener">原文链接</a></p>
<p> : <a href="https://my.oschina.net/u/3457980/blog/1579483" target="_blank" rel="noopener">https://my.oschina.net/u/3457980/blog/1579483</a></p>
]]></content>
      
        <categories>
            
            <category> tech </category>
            
            <category> java </category>
            
            <category> jsp </category>
            
            <category> EL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
            <tag> jsp </tag>
            
            <tag> EL </tag>
            
            <tag> Expression Language </tag>
            
            <tag> el表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven依赖管理：控制依赖的传递]]></title>
      <url>/2018/03/10/java/maven/MavenDependencyMechanism/</url>
      <content type="html"><![CDATA[<p>本文档从实际工作中的一个bug出发，讲解了业务的背景、分析了问题产生的原因、介绍了解决问题的思路，同时介绍了Maven的依赖机制。</p>
<a id="more"></a>
<h1 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h1><p>最近在工作中，使用Dubbo调用远程服务，需要依赖被调用方(dubbo service provider)提供的一些jar包。</p>
<p>下面是maven和dubbo的相关配置。</p>
<ul>
<li><p>pom.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 远程dubbo服务 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.dubbo.service.provider&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;foo-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>dubbo-serivce-provider.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference id=&quot;fooService&quot; interface=&quot;com.dubbo.service.provider.fooService&quot; check=&quot;false&quot; url=&quot;$&#123;dubbo.foo.server.address&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>项目启动后，出现如下异常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodError: com.google.common.base.Platform.systemNanoTime()</span><br></pre></td></tr></table></figure>
<p>  <img src="https://raw.githubusercontent.com/ijiangtao/img/master/job/bz/study/maven/dependency/NoSuchMethodError.png" alt="image"></p>
<h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>通过Eclipse查看依赖树发现，foo-api所依赖的jar与项目中的jar发生了冲突。</p>
<p>  <img src="https://raw.githubusercontent.com/ijiangtao/img/master/job/bz/study/maven/dependency/maven-dependency-1.jpg" alt="image"></p>
<p>可以将如上场景抽象为下面的逻辑：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A依赖</span><br><span class="line">    -&gt; B</span><br><span class="line"></span><br><span class="line">D依赖</span><br><span class="line">    -&gt; A</span><br><span class="line">    -&gt; B</span><br></pre></td></tr></table></figure>
<p>  因为Maven拥有传递依赖的特性，因此真实的依赖树是：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A依赖</span><br><span class="line">    -&gt; B</span><br><span class="line"></span><br><span class="line">D依赖</span><br><span class="line">    -&gt; A</span><br><span class="line">        -&gt; B</span><br><span class="line">    -&gt; B</span><br></pre></td></tr></table></figure>
<p>因此D项目发生了依赖冲突。</p>
<h1 id="相关知识：依赖传递-Transitive-Dependencies"><a href="#相关知识：依赖传递-Transitive-Dependencies" class="headerlink" title="相关知识：依赖传递(Transitive Dependencies)"></a>相关知识：依赖传递(Transitive Dependencies)</h1><p>依赖传递(Transitive Dependencies)是Maven 2.0开始的提供的特性，依赖传递的好处是不言而喻的，可以让我们不需要去寻找和发现所必须依赖的库，而是将会自动将需要依赖的库帮我们加进来。</p>
<p>例如A依赖了B，B依赖了C和D，那么你就可以在A中，像主动依赖了C和D一样使用它们。并且传递的依赖是没有数量和层级的限制的，非常方便。</p>
<p>但依赖传递也不可避免的会带来一些问题，例如：</p>
<ul>
<li>当依赖层级很深的时候，可能造成循环依赖(cyclic dependency)</li>
<li>当依赖的数量很多的时候，依赖树会非常大</li>
</ul>
<p>针对这些问题，Maven提供了很多管理依赖的特性：</p>
<h2 id="依赖调节-Dependency-mediation"><a href="#依赖调节-Dependency-mediation" class="headerlink" title="依赖调节(Dependency mediation)"></a>依赖调节(Dependency mediation)</h2><p>  依赖调节是为了解决版本不一致的问题(multiple versions),并采取就近原则(nearest definition)。</p>
<p>  举例来说，A项目通过依赖传递依赖了两个版本的D：</p>
<p>  A -&gt; B -&gt; C -&gt; ( D 2.0) ,  A -&gt; E -&gt; (D 1.0),</p>
<p>  那么最终A依赖的D的version将会是1.0，因为1.0对应的层级更少，也就是更近。</p>
<h2 id="依赖管理-Dependency-management"><a href="#依赖管理-Dependency-management" class="headerlink" title="依赖管理(Dependency management)"></a>依赖管理(Dependency management)</h2><p>  通过声明Dependency management，可以大大简化子POM的依赖声明。</p>
<p>  举例来说项目A,B,C,D都有共同的Parent，并有类似的依赖声明如下：</p>
<ul>
<li><p>A、B、C、D/pom.xml</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;group-a&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;artifact-a&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">      &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">          &lt;groupId&gt;group-c&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;excluded-artifact&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">      &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;group-a&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;artifact-b&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;bar&lt;/type&gt;</span><br><span class="line">      &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>  如果父pom声明了如下的Dependency management:</p>
</li>
<li><p>Parent/pom.xml</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;group-a&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;artifact-a&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">       &lt;exclusions&gt;</span><br><span class="line">         &lt;exclusion&gt;</span><br><span class="line">           &lt;groupId&gt;group-c&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;excluded-artifact&lt;/artifactId&gt;</span><br><span class="line">         &lt;/exclusion&gt;</span><br><span class="line">       &lt;/exclusions&gt;</span><br><span class="line"></span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;group-c&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;artifact-b&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">       &lt;type&gt;war&lt;/type&gt;</span><br><span class="line">       &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;group-a&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;artifact-b&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">       &lt;type&gt;bar&lt;/type&gt;</span><br><span class="line">       &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line"> &lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>
<p> 那么子项目的依赖声明会非常简单：</p>
</li>
<li><p>A、B、C、D/pom.xml</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;group-a&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;artifact-a&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;group-a&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;artifact-b&lt;/artifactId&gt;</span><br><span class="line">    &lt;!-- 依赖的类型，对应于项目坐标定义的packaging。大部分情况下，该元素不必声明，其默认值是jar.--&gt;</span><br><span class="line">    &lt;type&gt;bar&lt;/type&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="依赖范围-Dependency-scope"><a href="#依赖范围-Dependency-scope" class="headerlink" title="依赖范围(Dependency scope)"></a>依赖范围(Dependency scope)</h2><p>Maven在编译主代码的时候需要使用一套classpath，在编译和执行测试的时候会使用另一套classpath,实际运行项目的时候，又会使用一套classpath。</p>
<p> 依赖范围就是用来控制依赖与这三种classpath(编译classpath、测试classpath、运行classpath)的关系的，Maven有以下几种依赖范围：</p>
<ul>
<li>compile: 编译依赖范围。</li>
</ul>
<p>如果没有指定，就会默认使用该依赖范围。</p>
<p>使用此依赖范围的Maven依赖，对于编译、测试、运行三种classpath都有效。</p>
<ul>
<li><p>test: 测试依赖范围。</p>
<p>使用此依赖范围的Maven依赖，只对于测试classpath有效，在编译主代码或者运行项目的使用时将无法使用此类依赖。</p>
<p>典型例子是JUnit，它只有在编译测试代码及运行测试的时候才需要。</p>
</li>
</ul>
<ul>
<li>provided: 已提供依赖范围。</li>
</ul>
<p>使用此依赖范围的Maven依赖，对于编译和测试classpath有效，但在运行时无效。</p>
<p>典型例子是servlet-api，编译和测试项目的时候需要该依赖，但在运行项目的时候，由于容器已经提供，就不需要Maven重复地引入一遍。</p>
<ul>
<li>runtime: 运行时依赖范围。</li>
</ul>
<p>使用此依赖范围的Maven依赖，对于测试和运行classpath有效，但在编译主代码时无效。</p>
<p>典型例子是JDBC驱动实现，项目主代码的编译只需要JDK提供的JDBC接口，只有在执行测试或者运行项目的时候才需要实现上述接口的具体JDBC驱动。</p>
<ul>
<li>system: 系统依赖范围。</li>
</ul>
<p>该依赖与三种classpath的关系，和provided依赖范围完全一致。但使用system范围依赖时必须通过systemPath元素显式地指定依赖文件的路径。由于此类依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能造成构建的不可移植，因此应该谨慎使用。</p>
<p>systemPath元素可以引用环境变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.system&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;foo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">    &lt;systemPath&gt;$&#123;maven.home&#125;/lib/foo.jar&lt;/systemPath&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>import(Maven 2.0.9及以上): 导入依赖范围。</p>
<p>我们知道，maven的继承和java是一样的，只能单继承。因此，父pom可能非常庞大，如果你想把依赖分类清晰的进行管理，就更不可能了。</p>
<p>import scope依赖能解决这个问题。你可以把Dependency Management放到单独用来管理依赖的pom中，然后在需要使用依赖的模块中通过import scope依赖，就可以引入dependencyManagement。</p>
<p>例如，父pom.xml：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;com.test.sample&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;base-parent1&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactid&gt;junit&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.8.2&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactid&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.2.16&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>通过非继承的方式来引入这段依赖管理配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.test.sample&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactid&gt;base-parent1&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactid&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactid&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>注意：import scope只能用在dependencyManagement里面</p>
</li>
</ul>
<h2 id="排除依赖-Excluded-dependencies"><a href="#排除依赖-Excluded-dependencies" class="headerlink" title="排除依赖(Excluded dependencies)"></a>排除依赖(Excluded dependencies)</h2><p>  排除不需要从所依赖的项目中传递过来的依赖，好比你买车的时候，主动跟卖车的说明不需要买车附加的保险业务。下面在解决思路中会举例说明。</p>
<h2 id="可选依赖-Optional-dependencies"><a href="#可选依赖-Optional-dependencies" class="headerlink" title="可选依赖(Optional dependencies)"></a>可选依赖(Optional dependencies)</h2><p>  被依赖的项目主动不把可以传递的依赖传递下去，好比卖车的主动声明自己不会让买车的人买这辆车附加的保险业务。下面在解决思路中会举例说明。</p>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>有了上面的知识背景，考虑使用Maven提供的Optional和Exclusions来控制依赖的传递。</p>
<p><strong>Optional</strong> 定义后，该依赖只能在本项目中传递，不会传递到引用该项目的父项目中，父项目需要主动引用该依赖才行。</p>
<ul>
<li>A/pom.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.bar&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;B&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>这种情况下，A对B的依赖将不会传递给D.</p>
<p><strong>Exclusions</strong> 则是主动排除子项目传递过来的依赖。</p>
<ul>
<li>D/pom.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.bar&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;A&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;com.bar&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;B&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>这种情况下，D对A的依赖将不会包含B.</p>
<p>开始提到的问题就是通过exclusion的方式解决的。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Maven的依赖机制(Dependency Mechanism)是Maven最著名的特性，并且是Maven在依赖管理领域中最令人称道的。因此，对Maven的依赖机制有深入的理解，对使用Maven非常必要。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management" target="_blank" rel="noopener">http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management</a></li>
<li><a href="http://blog.csdn.net/liutengteng130/article/details/46991829" target="_blank" rel="noopener">http://blog.csdn.net/liutengteng130/article/details/46991829</a></li>
<li><a href="https://stackoverflow.com/questions/2619598/differences-between-dependencymanagement-and-dependencies-in-maven" target="_blank" rel="noopener">https://stackoverflow.com/questions/2619598/differences-between-dependencymanagement-and-dependencies-in-maven</a></li>
<li><a href="http://blog.csdn.net/elricboa/article/details/70199727" target="_blank" rel="noopener">http://blog.csdn.net/elricboa/article/details/70199727</a></li>
<li><a href="https://my.oschina.net/javaroad/blog/1600648" target="_blank" rel="noopener">https://my.oschina.net/javaroad/blog/1600648</a></li>
<li><a href="https://www.cnblogs.com/lddbupt/p/5544956.html" target="_blank" rel="noopener">https://www.cnblogs.com/lddbupt/p/5544956.html</a></li>
<li><a href="http://blog.csdn.net/rocklee/article/details/51692054" target="_blank" rel="noopener">http://blog.csdn.net/rocklee/article/details/51692054</a></li>
<li><a href="http://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html" target="_blank" rel="noopener">http://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html</a></li>
<li><a href="https://stackoverflow.com/questions/29395810/nosuchmethoderror-com-google-common-base-platform-systemnanotime-in-gwt-proje" target="_blank" rel="noopener">https://stackoverflow.com/questions/29395810/nosuchmethoderror-com-google-common-base-platform-systemnanotime-in-gwt-proje</a></li>
<li><a href="http://blog.csdn.net/isea533/article/details/25300287" target="_blank" rel="noopener">http://blog.csdn.net/isea533/article/details/25300287</a></li>
<li><a href="http://blog.csdn.net/mn960mn/article/details/50894022" target="_blank" rel="noopener">http://blog.csdn.net/mn960mn/article/details/50894022</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> tech </category>
            
            <category> java </category>
            
            <category> maven </category>
            
            <category> dependency </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> dependency </tag>
            
            <tag> 依赖 </tag>
            
            <tag> 依赖传递 </tag>
            
            <tag> 依赖控制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动应用开发：Web App模式 、Native App模式及Hyprid App模式]]></title>
      <url>/2018/02/27/design/product/app/WebApp/</url>
      <content type="html"><![CDATA[<h1 id="概述：混合时代"><a href="#概述：混合时代" class="headerlink" title="概述：混合时代"></a>概述：混合时代</h1><p>在PC时代，有C/S模式（又称Client/Server或客户/服务器模式）和B/S模式（又称Browser/Server或浏览器和服务器模式）之争，而在移动应用时代，APP开发模式通常分为Web APP与Native APP原生模式两种。</p>
<p>这两种模式均各自有自己的优势，到底是采用Native App开发还是采用Web App开发一直是业界争论的焦点，但是随着HTML5的发展及云服务普及，采用HTML5进行Web App开发正在成为一种趋势，用户可以根据应用特点和需求进行选择，亦可选择两者混合模式（Hyprid App）。</p>
<p>下面分别对<strong>Native App</strong>、<strong>Web App</strong>和<strong>Hybrid App</strong> 进行详细介绍，让你对这几种开发模式有深入的了解。</p>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/blog/design/product/app/20180227/WebApp-HybridApp-NativeApp-907f2ff9d9f3a8c202d3dd210a10c8b3.png" alt=""></p>
<a id="more"></a>
<h2 id="Native-App开发"><a href="#Native-App开发" class="headerlink" title="Native App开发"></a>Native App开发</h2><p>Native App开发即我们所称的传统APP开发模式（原生APP开发模式），该开发针对IOS、Android等不同的手机操作系统要采用不同的语言和框架进行开发，该模式通常是由“云服务器数据+APP应用客户端”两部份构成，APP应用所有的UI元素、数据内容、逻辑框架均安装在手机终端上。</p>
<p>Native App可以类比Client/Server结构(C/S结构)，也就是是大家熟知的客户机和服务器结构。通过C/S结构也可以充分利用两端硬件环境的优势，将任务合理分配到Client端和Server端来实现，降低了系统的通讯开销。</p>
<h2 id="Web-App开发"><a href="#Web-App开发" class="headerlink" title="Web App开发"></a>Web App开发</h2><p>Web App开发即是一种框架型APP开发模式（HTML5  APP 框架开发模式），该开发具有跨平台的优势，该模式通常由“HTML5云网站+APP应用客户端”两部份构成，APP应用客户端只需安装应用的框架部份，而应用的数据则是每次打开APP的时候，去云端取数据呈现给手机用户。</p>
<p>Web App可以类比大家熟知的B/S结构，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。</p>
<h2 id="Hybrid-App"><a href="#Hybrid-App" class="headerlink" title="Hybrid App"></a>Hybrid App</h2><p>Hybrid App（混合模式移动应用）是指介于web-app、native-app这两者之间的app，兼具“Native App良好用户交互体验的优势”和“Web App跨平台开发的优势”。</p>
<p>这就像C/S与B/S结合产生的CB/S模式，将B/S与C/S的优势完美地结合起来，应用系统既能以B/S的方式发布运行，同时又具有C/S方式的极强的可操作性。</p>
<h1 id="Native-APP开与Web-APP开发对比"><a href="#Native-APP开与Web-APP开发对比" class="headerlink" title="Native APP开与Web APP开发对比"></a>Native APP开与Web APP开发对比</h1><h2 id="Web-APP（嵌入型APP）"><a href="#Web-APP（嵌入型APP）" class="headerlink" title="Web APP（嵌入型APP）"></a>Web APP（嵌入型APP）</h2><blockquote>
<p>Web App 指采用Html5语言写出的App，不需要下载安装。类似于现在所说的轻应用。生存在浏览器中的应用，基本上可以说是触屏版的网页应用。</p>
</blockquote>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a><strong>组成</strong></h3><ul>
<li>html5云网站</li>
<li>APP客户端</li>
</ul>
<h3 id="适用"><a href="#适用" class="headerlink" title="适用"></a><strong>适用</strong></h3><pre><code>电子商务、金融、新闻资讯、企业集团需经常更新内容的APP应用。
</code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><ul>
<li><p>每次打开APP，都要通过APP框架向云网站取UI及数据；</p>
</li>
<li><p>手机用户无法上网则无法访问APP应用中的数据。</p>
</li>
<li><p>框架型的APP无法调用手机终端的硬件设备（语音、摄像头、短信、GPS、蓝牙、重力感应等）</p>
</li>
<li><p>框架型APP的访问速度受手机终端上网的限制，每次使用均会消耗一定的手机上网流量；</p>
</li>
<li><p>框架型APP应用的安装包小巧，只包含框架文件，而大量的UI元素、数据内容刚存放在云端；</p>
</li>
<li><p>APP用户每次都可以访问到实时的最新的云端数据；　</p>
</li>
<li><p>APP用户无须频繁更新APP应用，与云端实现的是实时数据交互；</p>
</li>
</ul>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>  根据上面的特点，可以总结如下优缺点：</p>
<p><strong>优点</strong></p>
<p>（1）开发成本低，</p>
<p>（2）更新快，</p>
<p>（3）更新无需通知用户，不需要手动升级</p>
<p>（4）能够跨多个平台和终端。</p>
<p><strong>缺点</strong></p>
<p>（1）临时性的入口</p>
<p>（2）无法获取系统级别的通知，提醒，动效等等</p>
<p>（3）用户留存率低</p>
<p>（4）设计受限制诸多</p>
<p>（5）体验较差</p>
<h2 id="Native-App（原生型APP）"><a href="#Native-App（原生型APP）" class="headerlink" title="Native App（原生型APP）"></a>Native App（原生型APP）</h2><blockquote>
<p>Native APP 指的是原生程序，一般依托于操作系统，有很强的交互，是一个完整的App，可拓展性强。需要用户下载安装使用。</p>
</blockquote>
<h3 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h3><ul>
<li>云服务器数据中心</li>
<li>APP客户端</li>
</ul>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li><p>每次获取最新的APP功能，需要升级APP应用；</p>
</li>
<li><p>原生型APP应用的安装包相对较大，包含UI元素、数据内容、逻辑框架；</p>
</li>
<li><p>手机用户无法上网也可访问APP应用中以前下载的数据。</p>
</li>
<li><p>原生型的APP可以调用手机终端的硬件设备（语音、摄像头、短信、GPS、蓝牙、重力感应等）</p>
</li>
<li><p>APP应用更新新功能，涉及到每次要向各个应用商店进行提交审核。</p>
</li>
</ul>
<h3 id="适用-1"><a href="#适用-1" class="headerlink" title="适用"></a>适用</h3><pre><code>游戏、电子杂志、管理应用、物联网等无需经常更新程序框架的APP应用。
</code></pre><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong></p>
<p>（1）打造完美的用户体验</p>
<p>（2）性能稳定</p>
<p>（3）操作速度快，上手流畅</p>
<p>（4）访问本地资源（通讯录，相册）</p>
<p>（5）设计出色的动效，转场，</p>
<p>（6）拥有系统级别的贴心通知或提醒</p>
<p>（7）用户留存率高</p>
<p><strong>缺点</strong></p>
<p>（1）分发成本高（不同平台有不同的开发语言和界面适配）</p>
<p>（2）维护成本高（例如一款App已更新至V5版本，但仍有用户在使用V2， V3， V4版本，需要更多的开发人员维护之前的版本）</p>
<p>（3）更新缓慢，根据不同平台，提交–审核–上线 等等不同的流程，需要经过的流程较复杂</p>
<h1 id="两种模式的选择"><a href="#两种模式的选择" class="headerlink" title="两种模式的选择"></a>两种模式的选择</h1><h2 id="什么时候应该选择Native-App"><a href="#什么时候应该选择Native-App" class="headerlink" title="什么时候应该选择Native App"></a>什么时候应该选择Native App</h2><ul>
<li>为应用收费</li>
</ul>
<p>没有任何地方规定开发者不能对一个移动Web App收取使用费，但是由于某些原因，人们常常认为不能或是不应该对一个Web App收取费用。由于历史原因，导致移动设备上付费服务遭遇两大阻力：</p>
<ul>
<li>开发游戏
　</li>
</ul>
<p>　如果你是想开发一个移动游戏（移动游戏是移动市场上最大的一块），那么你需要开发一个Native App。游戏对资源的占用很大，并且需要使用许多设备API或平台API。虽然，现在有几款完全使用Web技术开发的游戏占有了一定的市场份额，但是和Native App市场的占有情况相比，还是微不足道的。游戏用户对应用的视觉和操作效果要求很高。移动Web虽然提供了一些仿真体验，但还远远不能满足用户的需求。</p>
<p>在开发移动游戏时，你需要慎重考虑你的应用需要支持哪些平台。幸运的是，现在有许多工具能够帮助你将你的游戏推向多个平台，但是完成这些工作，还是需要花费大量的人力和物力。</p>
<ul>
<li>使用定位功能</li>
</ul>
<p>下一个功能就是定位功能，可以通过GPS或者是信号检测确定用户当前的位置信息。以前只能通过Native App的APIs查看用户的位置信息，但现在大多数主流移动浏览器上都嵌入了W3C Geolocation API。像iPhone或Android这样安装了WebKit的设备，或是配置了Opera或Mozilla浏览器的设备，都可以获取用户的位置信息。</p>
<p>我相信定位功能会为Web技术带来许多全新的应用。如果能够合理利用Web浏览器，Web开发商就能使用用户的位置信息和其他内容开发出更加有趣的应用。虽然这在技术上没有太大的困难，但却受到隐私保护条例的限制。我们将Web浏览器当做是用户进入World Wide Web的入口。加入定位功能，意味着在网站中引入了一些敏感信息，这有可能导致严重的后果。但是位置感知应用中显示的位置信息必须经过用户的授权，用户当然有权禁止应用发布自己的位置信息。</p>
<ul>
<li>使用摄像头</li>
</ul>
<p>摄像头可以为你的应用提供丰富的可能性。以往移动MMS（Multimedia Messaging Service）被用于处理移动照片。换言之，你拍了一张照片后，需要使用MMS将它传送给一个服务器，服务器对照片做出相应的处理，并将处理完成的结果通知给你。这个过程是非常耗时的，而且相当复杂，也没有可靠性保障。</p>
<p>通过访问摄像头，Native App开发者能够简化拍照的过程。用户可以直接在客户端对照片做一些简单的处理，只有在有需要的时候才将照片上传给服务器，而且是通过可靠的HTTP传输。W3C正在开发一个访问摄像头的API，但现在还没有将这部分工作正式整合到浏览器中。</p>
<p>在许多类型的移动Apps中，摄像头是非常有用的，比如快拍应用、短片拍摄应用等等，摄像头可以用来捕捉许多重要的瞬间。不久的将来，我们可以看到——只要通过摄像头拍摄某个标识，应用程序就能自动完成对标识上的语言转换工作——这个技术在日本已经开始流行起来了。</p>
<ul>
<li>使用感应器
　</li>
</ul>
<p>现在越来越来越多的移动设备上都新增了感应器功能，该装置可以感知设备的物理速度以及重力，并将感知的数据结果传送给设备。这个装置常被用来感应设置是否被翻转，应用根据接受到的信息自动调节画面的方向。</p>
<p>感应器可以用来帮助用户提升与设备交互时的真实感；大多数移动设备都是手持的，应用能够根据设备的方向调整内容画面，比如翻转屏幕，或是检测物理移动，并能据此猜测用户所处的环境。举一个简单的例子：比如用户正在走路，那么感应器能够检测到一个轻缓的移动或是速度，这时可以为用户提供一个大字体的用户界面，从而使得用户更容易看清屏幕上的内容。</p>
<p>　<br>然而，开发者也不能过分依赖感应器，因为感应器无法区分究竟哪些交互是有意的，而哪些是没有意义的。每个移动交互都需要通过“传输测试”。设计你的交互时必须考虑用户在一个拥挤的汽车或是火车上的场景。考虑一下如果用户正身处拥挤的地铁或是正在驾车时，你的应用能否正确处理用户摇晃移动设备的动作。通常，大多数开发者都没有考虑这些因素。确保为每个任务设计一个备用方案以处理特殊场景中的移动交互。</p>
<ul>
<li>访问文件系统</li>
</ul>
<p>如果你的应用需要将数据保存在本地，那么你需要开发一个Native App。比如你要保存用户的地址簿、电话或E-mail信息，或是保存从其他设备上获取的数据。</p>
<p>访问文件系统常常会涉及到安全和用户隐私保护的问题。恶意应用程序可能会修改或是删除你的移动设备上的数据。一个携带病毒的应用程序可以利用移动设备上的关系网将病毒扩散到许多其他的手机上，在采用移动应用认证机制以前，这种事情是常常发生的。</p>
<p>另一方面，移动设备正变得越来越私人化，移动设备上保存了大量用户的个人信息，以及用户的朋友信息和商业信息。针对这些私人信息开发应用是一个不错的想法。但是这也存在一定的风险，使用保存在移动设备上的数据可以为用户提供更加有针对性的服务。</p>
<p>开发者必须谨记，只有在获得用户的授权后才能访问用户的私人数据。我们看到许多应用在没有得到用户授权的情况下使用了大量的用户私人数据，而被误认为是垃圾信息或是钓鱼应用，即使这些应用原本是在提供一些非常有用的服务。人们对你的应用的误解将会影响到你的服务的推广，如果运营商收到过多关于你的应用的投诉，那么你的服务可能将被终止，甚至会牵连其他的应用。</p>
<p>访问文件系统时至关重要的一点就是在没有获得用户授权的情况下，不要访问任何用户的私人数据。而这一点，往往被大多数应用忽略了。W3C正在为移动开发商开发相关的标准API，但目前该工作尚未完成。</p>
<ul>
<li>离线用户</li>
</ul>
<p>　<br>用户有可能是离线的或者无法接入移动网络。这在城市可能很少发生，即使是在农村，网络的覆盖也已经逐步普及了。但是短暂的网络连接中断还是时常发生的，你的应用程序应该考虑如何处理这种情景。</p>
<p>想想用户通常在什么时候，在哪里会使用你的App。如果是一个移动游戏，那么用户很可能在飞机上使用这个App。跟踪地图应用常在偏远且网络覆盖不佳的地方使用。移动旅游向导常在一个国外的网络中访问，往往需要支付漫游和国际网络费用。这时，应用程序最好能够为用户提供离线服务，保证用户在不接入网络的情况下，仍然能享受同等的服务。</p>
<p>现在支持HTML5的浏览器也能实现脱机访问功能，但对用户来说可能不太明显。随着越来越多的浏览器都开始支持脱机访问，应用需要明确地告诉用户网络连接中断时，他们仍然可以访问移动Web Apps。</p>
<p>Native Apps常常假设网络连接是可靠的。App通常只考虑了网络状况良好的情景，想当然地认为网络是封闭的，并且网速足够快。移动设备从网络良好的环境突然进入一个网络糟糕的环境并不少见。Native Apps应该在网络状况最差的情况下测试。比如用户启动任务时可能还是全信号覆盖，而在任务结束时可能已经完全没有网络信号了。</p>
<p>用户在安装Native Apps时，根本不会考虑是在线访问还是离线访问——他们期望的是不管在任何状况下，Native Apps都能正常工作。而这也是开发者的职责。</p>
<h2 id="什么时候应该选择Web-App"><a href="#什么时候应该选择Web-App" class="headerlink" title="什么时候应该选择Web App"></a>什么时候应该选择Web App</h2><p>只要你的应用程序不满足之前提到的Native App条件之一，那么你就没有必要开发一个Native App，而应该选择开发一个Web App。</p>
<p>Native App有许多优秀的特质，并且具有很大的市场潜力，但是Web Apps是唯一一个经久不衰的移动内容、服务、应用开发平台。</p>
<p>Native App并不能明显地为用户提供更好的服务；它反而会增加项目的成本，减少了应用发布的渠道，增加了App升级的复杂度，削弱了开发者对应用的控制和利润，并且可能会给设备带来麻烦。Native App可以为开发者带来短期的效益，但这是有一定风险的，甚至可能会影响到移动市场的可持久发展。</p>
<p>对于那些有着丰富的移动开发经验的程序员来说，一提到“要开发一个功能丰富的应用”时，可能首先想到的就是Native App。虽然在很多设备上，这一想法仍然适用，但是现在移动Web Apps上也提供了足够丰富的功能接口供开发者调用。这使得Web App不仅可以像Native App一样被设计得功能丰富界面绚丽，而且还能在各个平台上迁移，甚至不用修改一行代码。</p>
<p>现在在移动设备开发中，移动Web Apps的创新进入了前所未有的高潮时期。但更重要的是，这是有史以来第一次，移动设备开发商决定共同制定一个移动Web开发的标准，就像是桌面Web上的标准一样。不仅如此，那些支持移动Web App创新功能的设备或是支持第三方浏览器的移动设备都受到消费者的欢迎。</p>
<h1 id="Web-App"><a href="#Web-App" class="headerlink" title="Web App"></a>Web App</h1><h2 id="Web-App的受限因素"><a href="#Web-App的受限因素" class="headerlink" title="Web App的受限因素"></a>Web App的受限因素</h2><p>Web App体验中受限于5个因素：网络环境，渲染性能，平台特性，受限于浏览器，系统限制。</p>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/blog/design/product/app/20180227/WebAppLimits-22c5ec51749b68d26f83fd67334713b9.png" alt=""></p>
<p> <strong>网络环境，渲染性能</strong></p>
<p>Web APP对网络环境的依赖性较大，因为Web APP中的H5页面，当用户使用时，去服务器请求显示页面。如果此时用户恰巧遇到网速慢，网络不稳定等其他环境时，用户请求页面的效率大打折扣，在用户使 用中会出现不流畅，断断续续的不良感受。同时，H5技术自身渲染性能较弱：对复杂的图形样式，多样的动效，自定义字体等的支持性不强。</p>
<p>因此，基于网络环境和渲染性能的影响，在设计H5页面时，应注意以下几点：</p>
<ul>
<li>简化不重要的动画/动效</li>
<li>简化复杂的图形文字样式</li>
<li>减少页面渲染的频率和次数</li>
</ul>
<p><strong>受限于浏览器</strong></p>
<p>通常Web App生存于浏览器里，宿主是浏览器。不同的浏览器自身的属性不尽相同，如：浏览器自带的手势，页面切换方式，链接跳转方式，版本兼容问题等等。</p>
<p>再如，基于浏览器的Web APP在打开新的模块中的页面时，大多会新开窗口来展现。例如用户在使用购物类APP时，浏览每日精选模块时，每当打开新的商品时，默认新开一个窗口。这 样的优劣势显而易见：优势是能够记录用户浏览过的痕迹，浏览过的商品，以便后续横向对比；劣势是过多的页面容易使用户迷失在页面中。</p>
<p>因此，Web App基于浏览器的特性，从设计角度应该遵循以下了两点：</p>
<ul>
<li><p>少用手势，避免与浏览器手势冲突。</p>
</li>
<li><p>减少页面跳转次数，尽量在当前页面显示。</p>
</li>
</ul>
<p><strong>系统限制，平台特性</strong></p>
<p>由于Html5语言的技术特性，无法调用系统级别的权限。例如，系统级别的弹窗，系统级别的通知，地理信息，通讯录，语音等等。且与系统的兼容性也会存在一些问题。以上限制通常导致APP的拓展性不强，体验相对较差。</p>
<h2 id="Web-APP的设计要点"><a href="#Web-APP的设计要点" class="headerlink" title="Web APP的设计要点"></a>Web APP的设计要点</h2><p>综述所述，在设计Web APP时，应当遵循以下几点：</p>
<p>1.简化</p>
<ul>
<li>简化不重要的动画/动效</li>
<li>简化复杂的图形文字样式</li>
</ul>
<p>2.少用</p>
<ul>
<li>少用手势，避免与浏览器手势冲突</li>
<li>少用弹窗</li>
</ul>
<p>3.减少</p>
<ul>
<li>减少页面内容</li>
<li>减少控件数量</li>
<li>减少页面跳转次数，尽量在当前页面显示</li>
</ul>
<p>4.增强</p>
<ul>
<li>增强Loading时的趣味性</li>
<li>增强页面主次关系</li>
<li>增强控件复用性</li>
</ul>
<h2 id="WebApp的实现技术：WebView组件"><a href="#WebApp的实现技术：WebView组件" class="headerlink" title="WebApp的实现技术：WebView组件"></a>WebApp的实现技术：WebView组件</h2><p>在Android手机中内置了一款高性能webkit内核浏览器，在SDK中封装为一个叫做WebView组件。<br>WebView是Android中用来显示网页内容的一个控件。随着前端技术的不断发展，WebView也被使用得越来越普遍，更有甚者，有的App只有一个WebView控件，所有的内容与事件响应都在服务器端中进行，这在Android TV中比较常见。</p>
<h2 id="WebAPP的实际应用：H5页面嵌入APP"><a href="#WebAPP的实际应用：H5页面嵌入APP" class="headerlink" title="WebAPP的实际应用：H5页面嵌入APP"></a>WebAPP的实际应用：H5页面嵌入APP</h2><p>H5页面嵌入APP的优势就是够灵活，可以在不让用户更新app的前提下更换页面信息，缺点是没有native页面信息载入快，需要实时的加载并缓存。</p>
<p>淘宝、京东这类电商APP都是H5页面嵌入的：</p>
<ol>
<li><p><a href="https://m.taobao.com/" target="_blank" rel="noopener">https://m.taobao.com/</a></p>
</li>
<li><p><a href="https://m.jd.com/" target="_blank" rel="noopener">https://m.jd.com/</a></p>
</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://baike.baidu.com/item/B%2FS%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">https://baike.baidu.com/item/B%2FS%E7%BB%93%E6%9E%84</a></li>
<li><a href="http://www.docin.com/p-1443536858.html" target="_blank" rel="noopener">http://www.docin.com/p-1443536858.html</a></li>
<li><a href="https://baike.baidu.com/item/Client%2FServer" target="_blank" rel="noopener">https://baike.baidu.com/item/Client%2FServer</a></li>
<li><a href="https://baike.baidu.com/item/Native%20App" target="_blank" rel="noopener">https://baike.baidu.com/item/Native%20App</a></li>
<li><a href="http://www.woshipm.com/pd/123646.html" target="_blank" rel="noopener">http://www.woshipm.com/pd/123646.html</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> design </category>
            
            <category> product </category>
            
            <category> app </category>
            
        </categories>
        
        
        <tags>
            
            <tag> desgin </tag>
            
            <tag> product </tag>
            
            <tag> app </tag>
            
            <tag> HypridApp </tag>
            
            <tag> NativeApp </tag>
            
            <tag> WebApp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些有价值的工作建议]]></title>
      <url>/2018/02/18/thinking/work/SomeUsefulWorkAdvice/</url>
      <content type="html"><![CDATA[<p>狗年春节已经过去一半了，我们马上要投入新的一年的工作了，在此之前，我想分享给你一些我认为有价值的工作建议，希望对你有所帮助。</p>
<a id="more"></a>
<h2 id="不要过度工作"><a href="#不要过度工作" class="headerlink" title="不要过度工作"></a>不要过度工作</h2><p>努力工作是值得认可的，但是长时间工作，而不是放松、休息，就会降低工作的效率。</p>
<p>如果你喜欢自己现在的工作，或者为了赶进度不得不长时间工作，是可以的，但不要让过度工作形成一种习惯。</p>
<p>你要时刻反省自己：是否在低效工作、是否已经累了需要休息放松，毕竟除了工作成果，创造力也是衡量一个人价值的重要指标。而长时间超负荷工作，不仅有损健康，也是不利于激发创造力的。</p>
<p>最应该避免的，是跟风加班。看到同事们都没有走，或者自己的领导还在埋头工作，即使自己已经完成了工作或者已经很累了，也不敢去休息。这种心态是不对的，如果你已经很努力了，就应该心安理得的去工作。</p>
<p>科学的休息，是避免犯错，提升效率，持续创新的必要前提。</p>
<h2 id="推销自己"><a href="#推销自己" class="headerlink" title="推销自己"></a>推销自己</h2><p>即使做出了很好的工作，别人都不知道，也很难让自己的优秀成就提升自己的工作前景。</p>
<p>做一个角落里静静编码的工程师，并不可取。你的主管会支持你，但是他没法替你宣传。</p>
<p>公司的其他人需要明白你的价值，最好的办法就是告诉别人你做了什么。一封简单的 Email：”嗨，我完成了 XXX，欢迎将你的想法告诉我”，就很管用。</p>
<h2 id="学会带领团队"><a href="#学会带领团队" class="headerlink" title="学会带领团队"></a>学会带领团队</h2><p>工作几年后，已经没人怀疑你的技术能力了，当你的技术能力过关以后，就要考验你与他人相处的能力了。</p>
<p>技术能力之后需要培养的是领导能力，如何带领一个团队，有效地与其他人协同工作，取到更大的成果。</p>
<h2 id="找到水平更高的人"><a href="#找到水平更高的人" class="headerlink" title="找到水平更高的人"></a>找到水平更高的人</h2><p>找到那些比你水平更高、更聪明的人，尽量和他们在一起，吃饭或者喝咖啡，向他们讨教，了解他们拥有的知识。你的职业，甚至你的生活，都会因此变得更好。</p>
<h2 id="不做伪工作者"><a href="#不做伪工作者" class="headerlink" title="不做伪工作者"></a>不做伪工作者</h2><p>工作是永远做不完的。一些人拼命加班，把自己搞得很累，但收效却很微小。原因就在于，他们缺乏按照优先级为工作排序的能力，做了大量可做可不做的工作。</p>
<p>当你因为工作干不完而焦虑时，不妨停下来，重新梳理手头的工作：主动站在对公司业务帮助最大、提升自己能力的角度，优先完成那些最重要的工作。</p>
<h2 id="区别工作和职业"><a href="#区别工作和职业" class="headerlink" title="区别工作和职业"></a>区别工作和职业</h2><p>工作是谋生的手段，你完成任务，公司付你工资，互不亏欠；职业则是我们一辈子要从事的事业。想要把当下的工作作为一生的职业发展，就要换一种思路。</p>
<p>首先要有选择地做事情，凡是对职业有利的事，不论是否有报酬，都要做。反之，只是为了钱，和职业发展分道扬镳的事情，则尽可能不做。同时，对待自己的职业，需要专业的工作态度。工作中少受负面情绪和个人喜好的影响，一切以工作目标的达成为重。</p>
<h2 id="不要把自己当作公司的过客"><a href="#不要把自己当作公司的过客" class="headerlink" title="不要把自己当作公司的过客"></a>不要把自己当作公司的过客</h2><p>如今工作的流动性很大，刚毕业的年轻人，尤其会把前一两家公司当跳板，期望有了经验后进入好公司，因此从心态上就把自己当过客。<br>一旦觉得自己是过客，就会对很多工作视而不见、敷衍了事，也懒得维护与同事的关系。很容易变得不求上进，就浪费了锻炼自己的宝贵时间。怀着这样心态的人，即使跳槽，也难以被赋予重任。</p>
<h2 id="注重事前沟通"><a href="#注重事前沟通" class="headerlink" title="注重事前沟通"></a>注重事前沟通</h2><p>很多人因为急于做成某件事，生怕其他人有不同意见，就不打招呼、自己匆匆做主，指望“生米做成熟饭”后，大家来接受既成事实。</p>
<p>千万不要这样。大部分时候，提前打招呼总是更好、更职业的做事方式。事前不沟通，会给人留下不尊重人、缺乏团队精神的印象，甚至鸡蛋里面挑骨头，给领导打小报告。那时候再去解释，反而浪费更多的时间精力。</p>
<h2 id="注重阶段核查"><a href="#注重阶段核查" class="headerlink" title="注重阶段核查"></a>注重阶段核查</h2><p>根据不同的阶段，检查进度是否正常，质量是否过关，沟通是否通畅。</p>
<p>不要等到事情将要进行到最终期限或者已经无法改变，才想到进行核查。</p>
<p>如果对事情的结果完全无所谓，出了问题只是推脱说自己尽力了，那就会在别人心里留下不负责任的印象。</p>
<h2 id="不要被语言暴力激怒而乱了章法"><a href="#不要被语言暴力激怒而乱了章法" class="headerlink" title="不要被语言暴力激怒而乱了章法"></a>不要被语言暴力激怒而乱了章法</h2><p>工作中，总会有一些人没缘由地批评你的工作，但却不给出具体的问题和建设性的建议。这种行为，我们称为“语言暴力”。</p>
<p>对待这种人，一定不能自己乱了章法，而要有理有据的还击。在确认不是自己的错误后，搞清楚对方这么做的目的，主动沟通解决。同时，要敢于发声，让对方知道他们的问题。简言之，沟通中保持对别人的尊重，但是态度要坚决明确。只有这样，才不会被这些人欺负。</p>
<h2 id="凡事做记录，避免简单重复"><a href="#凡事做记录，避免简单重复" class="headerlink" title="凡事做记录，避免简单重复"></a>凡事做记录，避免简单重复</h2><p>工作中，经常会遇到同样的难题，很多时候解决方法可以借鉴。但大部分人过分相信自己的记忆力，很快把这些问题忘记了。因此，第二次，第三次……遇到同一个问题时，还是束手无策，或者花很多时间来解决。<br>学会做记录，会让下次再遇到这种问题时有法可循，快速解决。记录的同时，我们又把问题思考了一遍，会进步更快，而不是在低水平上重复。</p>
<h2 id="抬头看路，关注全局"><a href="#抬头看路，关注全局" class="headerlink" title="抬头看路，关注全局"></a>抬头看路，关注全局</h2><p>沉浸于每日的具体工作，缺乏对整个工作和行业的了解，是很多人工作中的问题。这样会导致一个后果——只见树木，不见森林。</p>
<p>如同画画，只盯着眼前的色块，不愿意后退看看整个画面，就会失去对全局的掌控，也就没法验证自己的想法、优化自己的工作。一定要克服这种心态，既要在工作上做到专业，又要有跳出工作、关注全局的能力。</p>
<h2 id="发挥自己的特长，不要想着脚踩三只船"><a href="#发挥自己的特长，不要想着脚踩三只船" class="headerlink" title="发挥自己的特长，不要想着脚踩三只船"></a>发挥自己的特长，不要想着脚踩三只船</h2><p>工作中，老板、下属和周围同事，以及公司，都是我们要关注、负责的。但有些时候他们彼此矛盾，很多人想同时让三者都满意，其实做不到。<br>我们要做的，是根据特长保住一头：在不损害其他两方利益的前提下，要么对老板负责，要么对周围人和下属负责，要么对公司负责。想脚踩三只船，最后结果只能是自己掉到水里。</p>
<h2 id="成功并不难，在于少犯错误"><a href="#成功并不难，在于少犯错误" class="headerlink" title="成功并不难，在于少犯错误"></a>成功并不难，在于少犯错误</h2><p>生活中，我们常常想的只是如何赢一个球，而不是整场比赛。但人生，是一个持续时间特别长的比赛，我们大部分时间并不需要关注“赢”这件事，只要不输就可以了。</p>
<p>比赛进行到半场的时候，很多对手会弃权，或者失去了比赛资格，最后剩下来的，就是真正的赢家。</p>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/blog/animal/dog/dog-at-work-with-computer.jpg" alt="img"></p>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><pre><code>1. http://mp.weixin.qq.com/s/xHR8ttdy-zEWiyL3xa_t5g

2. http://mp.weixin.qq.com/s/q9BRoAY5hc-Jeed5IOigzQ
</code></pre>]]></content>
      
        <categories>
            
            <category> thinking </category>
            
            <category> work </category>
            
        </categories>
        
        
        <tags>
            
            <tag> thinking </tag>
            
            <tag> work </tag>
            
            <tag> advice </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如果工作也有毕业：工作三年的问题与解答]]></title>
      <url>/2018/02/18/thinking/work/IfWorkHasGraduation/</url>
      <content type="html"><![CDATA[<p>我们在这个世界上，需要很多，其中一部分可以用钱买到，一部分不可以。</p>
<p>我们在这个世界上，被人爱，有时候是无条件的——比如妈妈的爱，更多的时候是需要条件的。</p>
<p>被广泛接受的事实是，工作可以让我们获得收入，这是我们立身的基础，工作也可以让我获得成长和幸福，以及别人对我们的爱与尊重。</p>
<p>我已经工作三年了，正如大学三年我们要面对毕业、求职和独立，工作三年以后，也该做某个阶段性的“毕业”了。</p>
<a id="more"></a>
<p>如果这个“毕业”需要考试的话，我想下面几个问题是值得一考的。</p>
<hr>
<h2 id="工作是为了钱吗？"><a href="#工作是为了钱吗？" class="headerlink" title="工作是为了钱吗？"></a>工作是为了钱吗？</h2><p><strong>我的回答是：</strong></p>
<p>工作是为了钱，而且不仅是为了当下赚钱，还为了以后能赚更多的钱。</p>
<p>钱的价值必定会随着时间而慢慢消散的，所以要对未来的增值有一定的信心，当下的工作才是值得做的，否则我们的工作就会慢慢降低自己价值，直到不再被需要而被市场淘汰。</p>
<p>钱不仅是衡量我们的工作是否有价值的一个指标，也是市场的一个信号，如果我们做的选择是正确的，市场就通过钱来奖励我们，如果我们做了错误的决定，市场就会拿走我们的钱作为惩罚。</p>
<p>总之，工作是为了创造价值，而钱是价值最直接、最公平的体现，所以某种程度上说，工作就是为了钱，而且是为了当前以及为来更多的钱。**</p>
<h2 id="工作是兴趣更重要还是钱更重要？"><a href="#工作是兴趣更重要还是钱更重要？" class="headerlink" title="工作是兴趣更重要还是钱更重要？"></a>工作是兴趣更重要还是钱更重要？</h2><p><strong>我的回答是：</strong></p>
<p>我想两者是相互影响的。因为有兴趣，我们愿意投入时间，从而把工作做得更好，所以我们会赚更多的钱；我们赚了更多的钱，也是对我们的兴趣的一种激励，从而让我们的兴趣更加浓厚。</p>
<p>能把兴趣和收入统一，才是值得做的工作。否则，如果只是一味的赚钱和毫无乐趣可言，那就是在自残；如果只是一味的开心付出而收入寥寥，那就是慈善。</p>
<p>总之，工作的兴趣和收入同样重要。如果只有兴趣而收入不高，那就要想办法让自己的努力更多的变现；相反，如果收入不错但是工作提不起精神，那就要想办法培养兴趣或者转换角色。但如果工作既没有兴趣也没有好的收入，那就要好好反省，自己到底是在工作还是混日子。</p>
<h2 id="工作和事业有什么区别？"><a href="#工作和事业有什么区别？" class="headerlink" title="工作和事业有什么区别？"></a>工作和事业有什么区别？</h2><p><strong>我的回答是：</strong></p>
<p>从日常生活中，我们常常将一些大的事情冠以“事业”，赚钱谋生的主要手段则被称为“工作”。</p>
<p>百科中将“工作”概括为“劳动生产”，“事业”一词主要是指“具有一定目标、规模和系统的对社会发展有影响的经常活动”。</p>
<p>其实事业和工作对于个人来说，没有本质上的差别，只是前者在时间和影响力的范围上更为广阔。</p>
<hr>
<p><strong> 如果这张“考卷”放在你面前，你会如何作答呢？</strong></p>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/blog/animal/dog/dog-at-work-with-computer-2.jpg" alt="DogAtWork"></p>
]]></content>
      
        <categories>
            
            <category> thinking </category>
            
            <category> work </category>
            
        </categories>
        
        
        <tags>
            
            <tag> thinking </tag>
            
            <tag> work </tag>
            
            <tag> advice </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello,Welcome to my blog world]]></title>
      <url>/2018/02/15/bloginfo/Welcome/</url>
      <content type="html"><![CDATA[<p>Contact me:</p>
<p>Email:ijiangtao@foxmail.com</p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> google </tag>
            
            <tag> gtm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java8 Method Reference]]></title>
      <url>/2018/01/18/java/jse/java8/Java8-MethodReference/</url>
      <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p><strong>Method Reference</strong>，即<strong>方法引</strong>用，是Java8为Lambda提供的简写语法。</p>
<blockquote>
<p>方法引用是与Lambda 表达式等价的一种结构，只是更为简约。</p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="举几个方法引用的例子："><a href="#举几个方法引用的例子：" class="headerlink" title="举几个方法引用的例子："></a>举几个方法引用的例子：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Integer::parseInt //静态方法引用</span><br><span class="line"></span><br><span class="line">System.out::print //实例方法引用</span><br><span class="line"></span><br><span class="line">Person::new       //构造器引用</span><br><span class="line"></span><br><span class="line">super::toString //引用某个对象的父类方法</span><br><span class="line"></span><br><span class="line">String[]::new //引用一个数组的构造器</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>总体来说，方法引用总结分为4类：</p>
<h2 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h2><ul>
<li><p>语法：ContainingClass::staticMethodName</p>
</li>
<li><p>例子： String::valueOf</p>
</li>
<li><p>对应的Lambda：(s) -&gt; String.valueOf(s)</p>
</li>
<li><p>说明：与静态方法调用相比，只是把.换为::</p>
</li>
</ul>
<h2 id="引用特定对象的实例方法"><a href="#引用特定对象的实例方法" class="headerlink" title="引用特定对象的实例方法"></a>引用特定对象的实例方法</h2><ul>
<li><p>语法：containingObject::instanceMethodName</p>
</li>
<li><p>例子: x::toString</p>
</li>
<li><p>对应的Lambda：() -&gt; this.toString()</p>
</li>
<li><p>说明：与引用静态方法相比，都换为实例的而已</p>
</li>
</ul>
<h2 id="引用特定类型的任意对象的实例方法"><a href="#引用特定类型的任意对象的实例方法" class="headerlink" title="引用特定类型的任意对象的实例方法"></a>引用特定类型的任意对象的实例方法</h2><ul>
<li><p>语法：ContainingType::methodName</p>
</li>
<li><p>例子: String::toString</p>
</li>
<li><p>对应的Lambda：(s) -&gt; s.toString()  </p>
</li>
<li><p>说明：实例方法要通过对象来调用，方法引用对应Lambda，Lambda的第一个参数会成为调用实例方法的对象</p>
</li>
</ul>
<h2 id="引用构造函数"><a href="#引用构造函数" class="headerlink" title="引用构造函数"></a>引用构造函数</h2><ul>
<li><p>语法：ClassName::new</p>
</li>
<li><p>例子: String::new</p>
</li>
<li><p>对应的Lambda：() -&gt; new String()</p>
</li>
<li><p>说明：构造函数本质上是静态方法，只是方法名字比较特殊</p>
</li>
</ul>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="静态方法引用的代码示例"><a href="#静态方法引用的代码示例" class="headerlink" title="静态方法引用的代码示例"></a>静态方法引用的代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr1 = &#123; 1, 3, 5, 0, 7, 1 &#125;;</span><br><span class="line"></span><br><span class="line">//按照大小排列:下面两种表达是等效的</span><br><span class="line">//Lambda表达式</span><br><span class="line">//Arrays.sort(arr1, (a1, a2) -&gt; a1.compareTo(a2));</span><br><span class="line">//方法引用(MethodReference)</span><br><span class="line">Arrays.sort(arr1, Integer::compareTo);</span><br><span class="line"></span><br><span class="line">Arrays.asList(arr1).forEach(item-&gt;System.out.print(item+&quot;,&quot;));</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,1,1,3,5,7,</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> tech </category>
            
            <category> java </category>
            
            <category> jse </category>
            
            <category> java8 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> java </tag>
            
            <tag> jse </tag>
            
            <tag> java8 </tag>
            
            <tag> lambda </tag>
            
            <tag> MethodReference </tag>
            
            <tag> 语法糖 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GTM介绍与使用]]></title>
      <url>/2018/01/15/gtm/GoogleTagManagerIntroduce/</url>
      <content type="html"><![CDATA[<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/gtm-post.png?raw=true" alt="post"></p>
<a id="more"></a>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="#summary">文档概述</a></p>
<p><a href="#term">名词解释</a></p>
<p><a href="#adv">优势</a></p>
<p><a href="#use">使用</a></p>
<p><a href="#qa">Q&amp;A</a></p>
<hr>
<h1 id="文档概述"><a href="#文档概述" class="headerlink" title="文档概述"></a>文档概述</h1><p><a name="summary"><a></a></a></p>
<p>这篇文档讲解了GTM(Google Tag Manager)相关的名词、概念和用法实例，并结合GA，提供了优势分析和操作实例。</p>
<p>同时，对于常见的问题和解答做了一一列举。</p>
<hr>
<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><p><a name="term"><a></a></a></p>
<h2 id="代码-Tag"><a href="#代码-Tag" class="headerlink" title="代码(Tag)"></a>代码(Tag)</h2><p>什么是代码？</p>
<p>代码就是在网页上执行的一段HTML代码。(A Tag is HTML code that executes on a page.)</p>
<p>而对于GTM,代码指的是向第三方（比如 Google）发送信息的代码段。(A tag is a snippet of code that sends information to a third party, such as Google.)</p>
<h2 id="触发器-Trigger"><a href="#触发器-Trigger" class="headerlink" title="触发器(Trigger)"></a>触发器(Trigger)</h2><p>在GTM中,触发器简而言之就是可以决定哪些代码能以何种方式触发。</p>
<h2 id="变量-Variable："><a href="#变量-Variable：" class="headerlink" title="变量 Variable："></a>变量 Variable：</h2><p>在GTM中,变量用于接收和存储数据，被Tag和Trigger使用</p>
<h2 id="Googel-Tag-Manager-谷歌代码管理器-GTM"><a href="#Googel-Tag-Manager-谷歌代码管理器-GTM" class="headerlink" title="Googel Tag Manager(谷歌代码管理器,GTM)"></a>Googel Tag Manager(谷歌代码管理器,GTM)</h2><p>Google 跟踪代码管理器是一个代码管理系统，可以快速轻松地更新网站或移动应用上的代码和代码段，例如用于流量分析和营销优化的代码和代码段。可以通过跟踪代码管理器的界面添加和更新 AdWords、Google Analytics（分析）、FirebaseAnalytics、Floodlight 和第三方代码或自定义代码，而无需修改网站代码。这样既减少了错误，也免除了配置代码时向开发者求助的麻烦。(Google Tag Manager is a tag management system that allows you to quickly and easily update tags and code snippets on your website or mobile app, such as those intended for traffic analysis and marketing optimization. You can add and update AdWords, Google Analytics, Firebase Analytics, Floodlight, and 3rd party or custom tags from the Tag Manager user interface instead of editing site code. This reduces errors and frees you from having to involve a developer when configuring tags.)</p>
<h2 id="Google-Analysis-分析，GA"><a href="#Google-Analysis-分析，GA" class="headerlink" title="Google Analysis(分析，GA)"></a>Google Analysis(分析，GA)</h2><p>Google Analytics（分析）可以帮助你衡量销售与转化情况，且能为你提供新鲜的深入信息，帮助你了解访问者如何使用您的网站，他们如何到达您的网站，以及您可以如何吸引他们不断回访。</p>
<hr>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><p><a name="adv"><a></a></a></p>
<p>为什么要使用GTM? 使用GTM有什么优势？</p>
<p>简单来说，GTM让你添加js代码到你站点的方式更简单，取代了硬编码的形式，你可以直接通过界面操作去决定什么时候触发和触发哪些页面，还能测试是否触发。</p>
<p>因此，Google Tag Manager是一个对用户非常优化的方案。能用于管理代码，标签，js代码，能像第三方发送数据，而已通过它给你的站点或app添加AD转跟踪代码，再营销代码，DCM代码等。</p>
<p>另外，GTM和GA可以结合使用，利用GTM部署GA代码。</p>
<p>下面总结了GTM的7个优点：</p>
<ol>
<li><p>它是免费的<br>无需担心，GTM是免费的，它有甚多令人惊奇的功能，如账户和用户管理，代码触发规则，第三方代码，自定义HTML等。</p>
</li>
<li><p>你可以直接使用<br>部署GTM后，你可以再不需要开发支持的情况下直接往页面添加代码，测试，直到你测试无误后直接发布。</p>
</li>
<li><p>忘记限制<br>通过google Tag Manager，你可以使用更多的非谷歌的产品，可以部署第三方预定义的代码，如marin，comScore，AdRoll等，如果找不到你想要的第三方代码，你开可以定义。不是可以适用于网站，可以用于ios和Android。</p>
</li>
<li><p>无缝与GA结合<br>Google Tag Manager能更好支持Google Anlaytics一些复杂而使用的功能，例如Userid跟踪，Userid跟踪能解决跨设备跟踪的问题，能够提供更加准确的数据。Google Tag Manager也可以更加方便的设置自定义维度，自定义字段，跨站跟踪，增强型电子商务跟踪等。</p>
</li>
<li><p>跟踪方便<br>由于网上很多资源，你可以很容易去跟踪如youtube视屏播放，打印跟踪，ajax表单跟踪等。</p>
</li>
<li><p>无需关心安全问题<br>无需担心，Google Tag Manager拥有你所需的安全管理功能，你可以给不同的用户授予不同的权限。</p>
</li>
<li><p>直接可以debug<br>有debug功能，内置错误检验，版本控制，所以你可以再上线之前知道发生了什么。</p>
</li>
</ol>
<hr>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><a name="use"><a></a></a></p>
<h2 id="使用的流程"><a href="#使用的流程" class="headerlink" title="使用的流程"></a>使用的流程</h2><ol>
<li><p>转至 tagmanager.google.com 并创建一个帐户。</p>
</li>
<li><p>在此帐户中为网站创建一个容器。</p>
</li>
<li><p>将容器代码段添加到网站。</p>
</li>
<li><p>将硬编码代码（如 AdWords 或 DoubleClick 代码）从网站的源代码迁移到跟踪代码管理器中。</p>
</li>
</ol>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>下面从创建GTM容器到页面触发嵌入指定代码片段为例，演示GTM的基本使用。</p>
<p>1 . 创建账号</p>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/job/bz/study/gtm/gtm-1.png" alt="创建账号1"></p>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/job/bz/study/gtm/gtm-2.png" alt="创建账号2"></p>
<p>2 . 安装</p>
<p>创建账号之后会弹出『Google 跟踪代码管理器服务条款协议』，接受后可以看到『安装 Google 跟踪代码管理器』页面，分别将两段代码放在网站的<head>和</head><body>元素中。</body></p>
<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/gtm-3.png?raw=true" alt="创建账号3"></p>
<p>3 . 配置变量</p>
<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/gtm-4.png?raw=true" alt=""></p>
<p>4 . 配置代码</p>
<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/gtm-%E5%90%8D%E7%A7%B0%E7%B1%BB%E5%9E%8B%E5%86%85%E5%AE%B9.png?raw=true" alt=""></p>
<p>5 . 配置触发器</p>
<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/gtm-%E8%A7%A6%E5%8F%91%E5%99%A8.png?raw=true" alt=""></p>
<p>6 . 发布</p>
<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/gtm-%E5%8F%91%E5%B8%83.png?raw=true" alt=""></p>
<p>7 . 查看效果</p>
<p>访问[<a href="http://test.mapemall.com/account/wish-list]即可看到指定的代码片段已经嵌入网页中了。" target="_blank" rel="noopener">http://test.mapemall.com/account/wish-list]即可看到指定的代码片段已经嵌入网页中了。</a></p>
<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/gtm-%E7%A4%BA%E4%BE%8B%E6%95%88%E6%9E%9C.png?raw=true" alt=""></p>
<hr>
<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><p><a name="qa"><a></a></a></p>
<h2 id="迁移到GTM需要准备什么？-难度大吗？"><a href="#迁移到GTM需要准备什么？-难度大吗？" class="headerlink" title="迁移到GTM需要准备什么？ 难度大吗？"></a>迁移到GTM需要准备什么？ 难度大吗？</h2><p>为确保 Google 跟踪代码管理器的配置符合您的业务需求，请考虑以下几点:</p>
<ol>
<li>需要多少帐号？应该由谁来创建这些帐号？</li>
</ol>
<p>首次设置跟踪代码管理器帐号时，可以制定一项策略，用来规定由谁负责长期管理帐号，以及万一团队成员角色变更，帐号所有权将如何处理。</p>
<p>最好每个公司设置一个跟踪代码管理器帐号,需要管理代码的公司应该在 Google 跟踪代码管理器中创建帐号,代理机构可以登录自己的 Google 帐号来管理客户的 Google 跟踪代码管理器帐号.</p>
<ol>
<li>您是移动应用开发者吗？</li>
</ol>
<p>为每个移动应用设置一个容器。应用的每个主要新版本都应具备一个新容器。（应用的次要更新可使用相同的容器，因为它们的配置键很可能完全相同或非常相似。</p>
<ol>
<li>您要管理多个网域吗？</li>
</ol>
<p>通常，您需要为每个网域设置一个容器。不过，如果用户体验和网站上的代码会跨越多个网域，则最好为这些相关的网域设置一个容器。以下是一些注意事项：</p>
<p>配置（规则、触发器和变量）无法在不同容器间轻松共享，除非使用容器导出和导入功能或 API。如果各个网域之间的代码和触发逻辑相似，则可以使用一个容器，原因是维护多个相似的配置比较费时，还容易引发错误。</p>
<p>一旦有人发布容器，所有更改均会生效（不论哪个网域）。如果您只需要对一个网域应用更改，而不希望其他网域受到影响，则可以为每个网域使用不同的容器。</p>
<ol>
<li>您在网站中部署了什么代码？部署在何处？</li>
</ol>
<p>首先是确认已经部署在网站中的所有代码及其部署位置（例如所有页眉或页脚、着陆页、确认页以及对按钮点击的响应等）。</p>
<p>仔细思考您想要收集的信息并决定是否要部署其他代码。如果您要收集的数据没有在网页上显示，请参阅开发者文档，了解如何将其他数据传递到代码。</p>
<p>如果您的所有代码都会在网页加载时触发，而且可以通过网址识别这些网页，那么基本的容器实现就可以满足您的需求了。创建 Google 跟踪代码管理器帐号和容器之后，只要将所提供的容器代码段（创建容器时生成）放在网站的每个网页上，紧跟在起始 HTML body 标记后面。要了解容器和容器代码段，请参阅设置和安装。</p>
<p>如果您的代码触发场景更为复杂，那么您可以采用自定义程度更高的容器实现方案。此类自定义解决方案通常会实现一个数据层，该数据层是一种代码，会帮助 Google 跟踪代码管理器将您网站或应用中的数据传送到您的代码中。您可以通过我们的解决方案指南了解使用数据层的原因和方式，还可以在我们的开发者网站上了解如何设置数据层。</p>
<h2 id="GA与GTM傻傻分不清楚-GA与GTM是同一个东西吗？他们之间有什么关系？"><a href="#GA与GTM傻傻分不清楚-GA与GTM是同一个东西吗？他们之间有什么关系？" class="headerlink" title="GA与GTM傻傻分不清楚:GA与GTM是同一个东西吗？他们之间有什么关系？"></a>GA与GTM傻傻分不清楚:GA与GTM是同一个东西吗？他们之间有什么关系？</h2><p>相当一段时间里，Google Analytics被用于收集，处理，配置和分析网站或app的数据，而且结果可以在页面直接看到。直到2012年，Google发布新款重磅产品，也就是Google Tag Manager。</p>
<p>对Google Tag Manager的认识错误在哪里？其中最大的一个误解就是认识Google Tag Manager和Google Analytics是同一个东西，这是错误的，事实上，Google Tag Manager完全是一个独立的工具。</p>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/job/bz/study/gtm/GA%E5%92%8CGTM%E5%AF%B9%E6%AF%94.png" alt="GA与GTM傻傻分不清楚"></p>
<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/GA%E4%B8%BB%E9%A1%B5.png?raw=true" alt=""></p>
<p><img src="https://github.com/ijiangtao/img/blob/master/job/bz/study/gtm/GTM%E4%B8%BB%E9%A1%B5.png?raw=true" alt=""></p>
]]></content>
      
        <categories>
            
            <category> tech </category>
            
            <category> google </category>
            
            <category> gtm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> google </tag>
            
            <tag> gtm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js核心数据类型简介]]></title>
      <url>/2018/01/15/nodejs/NodeJSDataType/</url>
      <content type="html"><![CDATA[<p>Node.js的核心类型有：</p>
<ul>
<li>number（数字）</li>
<li>boolean（布尔 值）</li>
<li>string（字符串）</li>
<li>object（对象）</li>
</ul>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/study/nodejs/20180211/Node.js%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="Node.js的数据类型"></p>
<p>另外两种类型——函数（function）和数组（array）实际上是object的特殊形式。</p>
<p>因为它们在语言以及运行时层面有一些额外的特性，因此将object、 function（函数）以及array（数组）归类为复杂数据类型。</p>
<p>null（没有值）和 undefined（不存在）也是object的特殊形式，在JavaScript语言中有特殊作用。</p>
<p>undefined值代表还没有赋值或者不存在，null的另外一个准确的意思是“没有值”。</p>
<hr>
<h1 id="number类型"><a href="#number类型" class="headerlink" title="number类型"></a><a name="number-type">number类型</a></h1><p>JavaScript中所有数字都采用IEEE 754标准定义的64位双精度浮点数表示。所有的正负整数都可以使用253位准确表示，JavaScript中的数字类型和其他语言的整数数据类型非常相似,然而，使用数字类型最棘手的部分是，许多数字的真实值实际上是实际数值的一个近似值。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.1+0.2</span><br><span class="line">0.30000000000000004</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>当对浮点数执行算术运算时，仅仅操作任意的实际数字并不一定能够得到准确值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1-0.1-0.3</span><br><span class="line">0.6000000000000001</span><br><span class="line">&gt; 1-0.1-0.3==0.6</span><br><span class="line">false</span><br></pre></td></tr></table></figure>
<h1 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a><a name="boolean-type">boolean类型</a></h1><p>JavaScript中的布尔（boolean）数据类型不仅简单而且容易使用。</p>
<p>布尔值可以是true或者false，虽然技术上可以使用Boolean函数将其他值转换为布尔值，<br>但实际上却很少需要使用这个函数，因为JavaScript语言会在需要时自动将任何值转换为布尔值，转换规则如下：</p>
<ul>
<li><p>false、0、空字符串（””）、NaN、null以及undefined都等价于false。</p>
</li>
<li><p>其他值都等价于true。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &quot;&quot;==0==null==NaN==undefined==false</span><br><span class="line">true</span><br></pre></td></tr></table></figure>
<h1 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a><a name="string-type">string类型</a></h1><p>JavaScript中的字符串（string）是一组Unicode字符（内部以16位UCS-2格式实现）组成的序列，可以表示世界上绝大部分字符，包括大部分亚洲语言中使用的字符。</p>
<p>JavaScript语言没有单独的字符（char）或者字符数据类型，可以使用只有一个字符的字符串来表示字符。</p>
<p>对于大部分使用Node.js编写的网络应用，需要使用UTF-8格式对外通信，Node会自动处理转换细节。<br>而如果是操纵二进制数据，那么处理字符串和字符集相关的经验会非常重要。</p>
<p>字符串可以使用单引号或者双引号封装。单引号和双引号在功能上是等价的，可以选择任意一个使用。如果想要在使用单引号的字符串中包含单引号，可以使用\’；同理，如果在使用双引号的字符串中包含双引号，可以使用\”。</p>
<p>要想获得一个JavaScript字符串的长度，只需使用length属性，在JavaScript中尝试获取值为null或undefined的字符串的长度时，将会抛出错误。</p>
<p>要想将两个字符串组合在一起，可以使用+操作符。如果将其他类型的数据混入到字符串中，JavaScript将尽可能将其他数据转换成字符串。许多人担心在处理字符串时使用连接运算符+会导致严重的性能问题，好消息是几乎所有现代浏览器的JavaScript实现——包括 Node.js使用的ChromeV8引擎，已经对该问题进行了深度优化，因此现在的运行性能非常好。</p>
<p>字符串函数 JavaScript中为字符串提供了许多有趣的函数。</p>
<h2 id="indexOf函数"><a href="#indexOf函数" class="headerlink" title="indexOf函数"></a>indexOf函数</h2><p>使用indexOf函数可以在一个字符串中搜索另外一个字符串。</p>
<h2 id="substr函数-slice函数"><a href="#substr函数-slice函数" class="headerlink" title="substr函数 slice函数"></a>substr函数 slice函数</h2><p>从一个字符串中截取一个子串，可以使用substr或slice函数 （前者会接受一个开始索引和一个需要截取的字符串长度；而后者则 会接受一个开始索引和一个结束索引）。</p>
<h2 id="split函数"><a href="#split函数" class="headerlink" title="split函数"></a>split函数</h2><p>如果字符串中有某个分隔符，可以使用split函数将字符串分割成子字符串并返回一个数组.</p>
<h2 id="trim函数"><a href="#trim函数" class="headerlink" title="trim函数"></a>trim函数</h2><p>可以使用trim函数（V8 JS）清除字符串前后的空白字符。</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>JavaScript支持功能强大的正则表达式。有几个字符串函数可以接收正则表达式作为参数并 执行。<br>正则表达式不仅可以使用字面量格式（literal format）（通 过将正则表达式放入两个斜杠字符[/]之间表示），也可以通过调用 RegExp对象的构造器来表示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; &apos;1,3,6,8,9&apos;.split(&apos;,&apos;);</span><br><span class="line">[ &apos;1&apos;, &apos;3&apos;, &apos;6&apos;, &apos;8&apos;, &apos;9&apos; ]</span><br><span class="line">&gt; /[Aa]&#123;2,&#125;/</span><br><span class="line">/[Aa]&#123;2,&#125;/</span><br><span class="line">&gt; new RegExp(&quot;[Aa]&#123;2,&#125;&quot;)</span><br><span class="line">/[Aa]&#123;2,&#125;/</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>以上两个都是正则表达式，用来表示一组两个或两个以上a字符 的序列（大写或者小写）。</p>
<p>为了将字符串对象中两个或两个以上的a字符序列替换成b字母，我们可以使用replace函数，以下两种写法都是可行的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; &quot;123aaammm&quot;.replace(/[Aa]&#123;2,&#125;/,&quot;b&quot;);</span><br><span class="line">&apos;123bmmm&apos;</span><br><span class="line">&gt; &quot;123aaammm&quot;.replace(new RegExp(&quot;[aA]&#123;2,&#125;&quot;),&quot;b&quot;);</span><br><span class="line">&apos;123bmmm&apos;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h2 id="search函数"><a href="#search函数" class="headerlink" title="search函数"></a>search函数</h2><p>与indexOf函数类似，search函数接收一个正则表达式参数，并 返回第一个匹配此正则表达式的子字符串的位置索引，如果匹配不存 在则返回-1：</p>
<blockquote>
<p>“123aaammm”.search(new RegExp(“[aA]{2,}”));<br>3</p>
</blockquote>
<h1 id="object类型"><a href="#object类型" class="headerlink" title="object类型"></a><a name="object-type">object类型</a></h1><p>对象（object）是JavaScript语言的核心之一，我们总会使用到 它。对象是一种相当动态和灵活的数据类型，可以轻松地为其新增或删除属性。</p>
<p>我们可以使用以下两种方式创建对象，而后者就是所谓的对象字面量语法（object literal syntax），它是目前最推荐的写 法。</p>
<p>我们还可以使用对象字面量语法指定对象的内容，在初始化时， 可以指定对象成员的名字以及对应的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; var user=new Object();</span><br><span class="line">undefined</span><br><span class="line">&gt; var user=&#123;&#125;;</span><br><span class="line">undefined</span><br><span class="line">&gt; user</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对象字面量语法（object-literal-syntax）"><a href="#对象字面量语法（object-literal-syntax）" class="headerlink" title="对象字面量语法（object literal syntax）"></a>对象字面量语法（object literal syntax）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; var user=&#123;name:&quot;Tom&quot;,age:18,gender:&quot;male&quot;&#125;;</span><br><span class="line">undefined</span><br><span class="line">&gt; user</span><br><span class="line">&#123; name: &apos;Tom&apos;, age: 18, gender: &apos;male&apos; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>添加属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; user.birthday=&apos;1999-01-01&apos;;</span><br><span class="line">&apos;1999-01-01&apos;</span><br><span class="line">&gt; user</span><br><span class="line">&#123; name: &apos;Tom&apos;, age: 18, gender: &apos;male&apos;, birthday: &apos;1999-01-01&apos; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="delete关键字"><a href="#delete关键字" class="headerlink" title="delete关键字"></a>delete关键字</h2><p>要删除对象的某个属性时，可以使用delete关键字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; delete user.age;</span><br><span class="line">true</span><br><span class="line">&gt; user</span><br><span class="line">&#123; name: &apos;Tom&apos;, gender: &apos;male&apos;, birthday: &apos;1999-01-01&apos; &#125;</span><br></pre></td></tr></table></figure>
<p>在JavaScript中获取一个关联数组对象的大小有些棘手。对象没有size或者length等属性或者方法。而为了得到对象的大小，可以使用如下写法（V8 JS）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; Object.keys(user);</span><br><span class="line">[ &apos;name&apos;, &apos;gender&apos;, &apos;birthday&apos; ]</span><br><span class="line">&gt; Object.keys(user).length;</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h2 id="关于JSON"><a href="#关于JSON" class="headerlink" title="关于JSON"></a>关于JSON</h2><p>JSON即JavaScript对象表示法（JavaScript Object Notation）。这种数据交换格式充分发挥了基于文本的数据格式的 灵活性，却没有像XML这样的其他格式所带来的麻烦（公平地讲， 相较于后者，JSON缺少一些格式验证功能，但它仍然是最好使用的 格式）。</p>
<p>JSON和对象字面量表示法非常相似，但是二者之间有两个关键 的区别：对象字面量表示法使用单引号或双引号封装属性名，甚至可以不使用任何引号，而在JSON中却是强制使用引号的。</p>
<p>另外，JSON中所有字符串都需要包含在双引号中： 实际上大部分JSON库兼容单引号字符串，但是为了提高兼容 性，无论是编写还是生成JSON数据，最好还是使用双引号。</p>
<p>通常我们可以使用V8的JSON.parse和JSON.stringify函数来生 成JSON数据。前者接收一个JSON字符串作为参数，并将其转换成 一个对象（如果失败，则抛出一个错误），而后者接收一个对象作为 参数，并返回一个JSON字符串表示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; JSON.stringify(user);</span><br><span class="line">&apos;&#123;&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;male&quot;&#125;&apos;</span><br></pre></td></tr></table></figure>
<h1 id="array类型"><a href="#array类型" class="headerlink" title="array类型"></a><a name="array-type">array类型</a></h1><p>JavaScript中的数组（array）类型实际上是JavaScript对象的一个特殊形式，它拥有一系列额外特性，这使得数组非常实用和强大。</p>
<p><img src="https://raw.githubusercontent.com/ijiangtao/img/master/study/nodejs/20180211/node.js.array_20180211143352.png" alt="array"></p>
<h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>我们可以使用传统的表示法或者数组字面量语法（array literal syntax）来创建数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; var arr1=new Array();</span><br><span class="line">undefined</span><br><span class="line">&gt; arr1</span><br><span class="line">[]</span><br><span class="line">&gt; var arr2=[];</span><br><span class="line">undefined</span><br><span class="line">&gt; arr2</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>
<p>和对象一样，我倾向于使用字面量语法来创建数组，而很少使用<br>传统表示法创建数组。</p>
<h2 id="校验类型"><a href="#校验类型" class="headerlink" title="校验类型"></a>校验类型</h2><p>如果我们对数组使用typeof运算符，会得到一个令人惊讶的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeof(arr2);</span><br><span class="line">&apos;object&apos;</span><br></pre></td></tr></table></figure>
<p>因为数组实际上就是对象，所以typeof运算符会返回”object”，而这不是我们想要的结果。<br>幸运的是，V8有一个语言扩展，可以确定是否为一个数组：Array.isArray函数（V8 JS）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Array.isArray(arr2);</span><br><span class="line">true</span><br></pre></td></tr></table></figure>
<h2 id="push函数"><a href="#push函数" class="headerlink" title="push函数"></a>push函数</h2><p>默认情况下，JavaScript数组是通过数字来进行索引的，可以通过以下两种方式在数组的末尾添加新项：</p>
<p>push函数 或者 arr[arr.length]=新的元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; var arr3=[&apos;dog&apos;,&apos;cat&apos;,&apos;tiger&apos;]</span><br><span class="line">undefined</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;tiger&apos; ]</span><br><span class="line"></span><br><span class="line">&gt; arr3.push(&apos;cow&apos;)</span><br><span class="line">4</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;tiger&apos;, &apos;cow&apos; ]</span><br><span class="line"></span><br><span class="line">&gt; arr3[arr3.length]=&quot;fly&quot;;</span><br><span class="line">&apos;fly&apos;</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;tiger&apos;, &apos;cow&apos;, &apos;fly&apos; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>可以通过指定特定的元素索引插入新元素。如果该元素的索引超过了最后一个元素，则两者之间的元素会被创建，并初始化为undefined值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr3[10]=&apos;pig&apos;</span><br><span class="line">&apos;pig&apos;</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;tiger&apos;, &apos;cow&apos;, &apos;fly&apos;, &lt;5 empty items&gt;, &apos;pig&apos; ]</span><br></pre></td></tr></table></figure>
<h2 id="pop函数"><a href="#pop函数" class="headerlink" title="pop函数"></a>pop函数</h2><p>删除末尾的元素，并返回被删除的元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;fly&apos;, &lt;5 empty items&gt;, &apos;pig&apos; ]</span><br><span class="line">&gt; arr3.pop()</span><br><span class="line">&apos;pig&apos;</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;fly&apos;, &lt;5 empty items&gt; ]</span><br><span class="line">&gt; arr3.pop()</span><br><span class="line">undefined</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;fly&apos;, &lt;4 empty items&gt; ]</span><br></pre></td></tr></table></figure>
<h2 id="delete关键字-1"><a href="#delete关键字-1" class="headerlink" title="delete关键字"></a>delete关键字</h2><p>使用delete关键字从数组中删除元素，被删除位置对应的值仍然“存在”，只是值被设置为<br>undefined。</p>
<h2 id="splice函数"><a href="#splice函数" class="headerlink" title="splice函数"></a>splice函数</h2><p>要想真正地从数组中删除某一项，可以使用splice函数，它会接收删除项的起始索引和数目作为参数。该函数会返回被删除的数组项，并且原始数组已经被修改，这些项不再存在：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;tiger&apos;, &apos;cow&apos;, &apos;fly&apos;, &lt;5 empty items&gt;, &apos;pig&apos; ]</span><br><span class="line">&gt; arr3.splice(2,2);</span><br><span class="line">[ &apos;tiger&apos;, &apos;cow&apos; ]</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;fly&apos;, &lt;5 empty items&gt;, &apos;pig&apos; ]</span><br></pre></td></tr></table></figure>
<h2 id="unshift函数"><a href="#unshift函数" class="headerlink" title="unshift函数"></a>unshift函数</h2><p>在数组首位添加一个元素，并返回新的数组长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr3</span><br><span class="line">[ &apos;cat&apos;, &apos;fly&apos;, &lt;4 empty items&gt; ]</span><br><span class="line">&gt; arr3.unshift(&apos;dog&apos;);</span><br><span class="line">7</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;fly&apos;, &lt;4 empty items&gt; ]</span><br></pre></td></tr></table></figure>
<h2 id="shift函数"><a href="#shift函数" class="headerlink" title="shift函数"></a>shift函数</h2><p>删除数组的第一个元素，并返回被删除的元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr3</span><br><span class="line">[ &apos;dog&apos;, &apos;cat&apos;, &apos;fly&apos;, &lt;4 empty items&gt; ]</span><br><span class="line">&gt; arr3.shift();</span><br><span class="line">&apos;dog&apos;</span><br><span class="line">&gt; arr3</span><br><span class="line">[ &apos;cat&apos;, &apos;fly&apos;, &lt;4 empty items&gt; ]</span><br></pre></td></tr></table></figure>
<h2 id="join函数"><a href="#join函数" class="headerlink" title="join函数"></a>join函数</h2><p>数组函数join可以将数组按照参数指定的分割符转为字符串，返回一个字符串，与字符串函数split作用相反</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr3.join(&apos;,&apos;);</span><br><span class="line">&apos;dog,cat,fly,,,,&apos;</span><br></pre></td></tr></table></figure>
<h2 id="sort函数"><a href="#sort函数" class="headerlink" title="sort函数"></a>sort函数</h2><p>sort函数用于对数组进行排序，如果不传参数则使用内置的排序函数，也可以用自己提供排序函作为参数传入sort函数中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; var arr4=[4,1,7,8,0,1,9,2,4,3];</span><br><span class="line">undefined</span><br><span class="line">&gt; arr4</span><br><span class="line">[ 4, 1, 7, 8, 0, 1, 9, 2, 4, 3 ]</span><br><span class="line">&gt; arr4.sort()</span><br><span class="line">[ 0, 1, 1, 2, 3, 4, 4, 7, 8, 9 ]</span><br><span class="line">&gt; arr4.sort(function (a,b) &#123; if(a&gt;b) return -1; if(a&lt;b) return 1; return 0; &#125;)</span><br><span class="line">[ 9, 8, 7, 4, 4, 3, 2, 1, 1, 0 ]</span><br></pre></td></tr></table></figure>
<h2 id="forEach函数"><a href="#forEach函数" class="headerlink" title="forEach函数"></a>forEach函数</h2><p>forEach函数（V8 JS）用于遍历数组，作用于for循环相同，只是不需要传入索引。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr4.forEach(function (value,index)&#123; console.log(&apos;index=&apos;+index+&apos;,value=&apos;+value);&#125;)</span><br><span class="line">index=0,value=9</span><br><span class="line">index=1,value=8</span><br><span class="line">index=2,value=7</span><br><span class="line">index=3,value=4</span><br><span class="line">index=4,value=4</span><br><span class="line">index=5,value=3</span><br><span class="line">index=6,value=2</span><br><span class="line">index=7,value=1</span><br><span class="line">index=8,value=1</span><br><span class="line">index=9,value=0</span><br><span class="line">undefined</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h1 id="function类型"><a href="#function类型" class="headerlink" title="function类型"></a><a name="function-type">function类型</a></h1><p>虽然第一眼看起来不像（名字并没有帮到它），但其实JavaScript是一门函数式编程语言（functional programming language），这意味着函数是完全意义上的对象，可以被操纵、扩展，还可以作为数据进行传递。Node.js充分利用了这种能力，因此，我们会在网络和Web应用中广泛地使用函数。</p>
]]></content>
      
        <categories>
            
            <category> tech </category>
            
            <category> node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> node </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
